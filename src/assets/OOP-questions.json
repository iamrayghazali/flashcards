{
  "1": [
    {
      "id": "q1",
      "question": "What is the JVM?",
      "answer": "The JVM (Java Virtual Machine) is a virtual machine that enables Java programs to run on any device or operating system by converting bytecode into machine code. It provides an abstraction layer between the compiled Java code and the underlying hardware, ensuring portability and platform independence."
    },
    {
      "id": "q2",
      "question": "What does Java compilation mean?",
      "answer": "Java compilation is the process of converting human-readable Java source code into bytecode, which is an intermediate language. This bytecode can then be executed by the Java Virtual Machine (JVM) on any platform."
    },
    {
      "id": "q3",
      "question": "What is Java bytecode?",
      "answer": "It’s the code generated by the Java compiler that the Java Virtual Machine (JVM) understands and executes. It’s like an intermediate language between your Java code and the computer."
    },
    {
      "id": "q4",
      "question": "What is the difference between the JRE and the JDK?",
      "answer": "JRE (Java Runtime Environment) lets you run Java programs, while JDK (Java Development Kit) includes tools to write, compile, and debug Java code."
    },
    {
      "id": "q5",
      "question": "What is the `Iterable` interface?",
      "answer": "It’s a Java interface that lets you loop through a collection using a for-each loop. Any class implementing it can be iterated."
    },
    {
      "id": "q6",
      "question": "What is the `Collection` interface?",
      "answer": "It’s a root interface for most Java collections like lists, sets, and queues. It provides basic methods like adding, removing, or checking elements."
    },
    {
      "id": "q7",
      "question": "What is the `Map` interface?",
      "answer": "It represents a collection of key-value pairs, where each key maps to a value. It’s used for data structures like dictionaries."
    },
    {
      "id": "q8",
      "question": "Compare sets, lists, and queues in Java.",
      "answer": "Sets don’t allow duplicates, lists allow duplicates and keep elements in order, queues follow specific ordering rules (e.g., FIFO)."
    },
    {
      "id": "q9",
      "question": "Compare `ArrayList` and `LinkedList` in Java.",
      "answer": "ArrayList is faster for accessing elements but slower for inserting/deleting in the middle. LinkedList is better for frequent insertions/deletions but slower for random access."
    },
    {
      "id": "q10",
      "question": "Are sets sorted in Java?",
      "answer": "Regular sets like HashSet aren’t sorted, but TreeSet keeps elements in a sorted order."
    }
  ],
  "2": [
    {
      "id": "q11",
      "question": "What control statements are available in Java?",
      "answer": "Java has control statements for decision-making (if, if-else, switch), loops (for, while, do-while), and jumping (break, continue, return). These help control the program’s flow."
    },
    {
      "id": "q12",
      "question": "Compare the different looping constructs in Java.",
      "answer": "for is for iterating a known number of times, while loops until a condition is false, and do-while ensures the loop runs at least once. Enhanced for-each is for iterating through collections."
    },
    {
      "id": "q13",
      "question": "Compare the different conditional constructs in Java.",
      "answer": "if checks a condition, if-else adds an alternative action, and switch is for handling multiple specific cases. switch is cleaner for many fixed conditions."
    },
    {
      "id": "q14",
      "question": "What is a `while` loop?",
      "answer": "A while loop repeatedly executes code as long as a given condition is true. It’s useful when the number of iterations isn’t known beforehand."
    },
    {
      "id": "q15",
      "question": "How do you manually break out of a loop?",
      "answer": "Use the break statement to immediately exit a loop. It works for all loop types."
    },
    {
      "id": "q16",
      "question": "What does the `var` keyword mean?",
      "answer": "var allows local variable type inference, meaning the compiler determines the type based on the value you assign. It simplifies code but must be explicitly initialized."
    },
    {
      "id": "q17",
      "question": "What are _lambda expressions_? How are they used in Java development?",
      "answer": "Lambda expressions are anonymous functions that let you write short, concise code for functional interfaces. They are often used in streams, collections, and functional programming tasks."
    }
  ],
  "3": [
    {
      "id": "q18",
      "question": "What are primitive types in Java? Give some examples.",
      "answer": "Primitive types are the most basic data types in Java, like int, double, boolean, and char. They store simple values directly in memory."
    },
    {
      "id": "q19",
      "question": "What is the difference between primitive types and reference types?",
      "answer": "Primitive types store actual values, while reference types (like objects and arrays) store references to memory locations where data is stored."
    },
    {
      "id": "q20",
      "question": "What is a class in Java?",
      "answer": "A class is a blueprint for creating objects, defining properties (fields) and behaviors (methods) they share."
    },
    {
      "id": "q21",
      "question": "What is an object in Java?",
      "answer": "An object is an instance of a class that holds specific values for its fields and can use the class’s methods."
    },
    {
      "id": "q22",
      "question": "What is a constructor?",
      "answer": "A constructor is a special method used to initialize objects, often setting their fields when they are created."
    },
    {
      "id": "q23",
      "question": "What is an `enum` in Java?",
      "answer": "An enum is a special class to define a fixed set of constants, like days of the week or directions."
    },
    {
      "id": "q24",
      "question": "Explain the difference between a class and an enum.",
      "answer": "A class can have unlimited flexibility for properties and behaviors, while an enum is a restricted class designed for predefined constants."
    },
    {
      "id": "q25",
      "question": "Explain the difference between a class and a record.",
      "answer": "A class can have complex behaviors and fields, while a record is a compact class designed for immutable data storage with auto-generated methods like toString()."
    },
    {
      "id": "q26",
      "question": "What are interfaces? Why should we use them?",
      "answer": "Interfaces define a contract for classes to implement without specifying how. They promote modular design and allow multiple implementations."
    },
    {
      "id": "q27",
      "question": "What is inheritance?",
      "answer": "Inheritance allows one class (child) to inherit fields and methods from another class (parent), promoting code reuse."
    },
    {
      "id": "q28",
      "question": "Is multiple inheritance allowed in Java?",
      "answer": "Not for classes, but interfaces can be inherited from multiple sources to avoid complexity."
    },
    {
      "id": "q29",
      "question": "What is a static class member?",
      "answer": "A static member belongs to the class itself, not instances, and can be accessed without creating an object."
    },
    {
      "id": "q30",
      "question": "Can a static method use non-static members?",
      "answer": "No, static methods can only use static members because they don’t belong to an instance."
    },
    {
      "id": "q31",
      "question": "What does the `final` keyword mean in Java?",
      "answer": "final prevents modification: a final variable cannot be changed, a final method cannot be overridden, and a final class cannot be extended."
    },
    {
      "id": "q32",
      "question": "What does the `abstract` keyword mean in Java?",
      "answer": "abstract defines a class or method that must be extended or implemented by another class, leaving some behavior undefined."
    },
    {
      "id": "q33",
      "question": "What is _overloading_ in Java?",
      "answer": "Overloading means defining multiple methods with the same name but different parameters in the same class."
    },
    {
      "id": "q34",
      "question": "What is _overriding_ in Java?",
      "answer": "Overriding means redefining a method in a subclass with the same name and parameters as in the parent class."
    },
    {
      "id": "q35",
      "question": "What is the difference between overloading and overriding?",
      "answer": "Overloading is about multiple methods in the same class with different parameters, while overriding modifies a parent method in a child class."
    },
    {
      "id": "q36",
      "question": "What is `null`?",
      "answer": "null represents the absence of a value or object reference in Java."
    },
    {
      "id": "q37",
      "question": "Compare the access modifiers in Java.",
      "answer": "public means accessible everywhere, protected is accessible in the same package and subclasses, default (no modifier) restricts to the package, and private is accessible only within the class."
    },
    {
      "id": "q38",
      "question": "What is the default access modifier in a class?",
      "answer": "The default access is package-private, allowing access only within the same package."
    },
    {
      "id": "q39",
      "question": "What is the purpose of the `equals()` method?",
      "answer": "equals() checks if two objects are logically equivalent based on their content, not memory location."
    },
    {
      "id": "q40",
      "question": "What is the difference between `==` and `equals()`?",
      "answer": "== checks reference equality (memory location), while equals() checks value equality."
    },
    {
      "id": "q41",
      "question": "What is the difference between `long` and `Long`?",
      "answer": "long is a primitive type, and Long is its wrapper class, which provides methods and supports null."
    },
    {
      "id": "q42",
      "question": "Which can store bigger numbers, `long` or `Long`?",
      "answer": "Both store the same range of numbers; the difference lies in usage, not storage capacity."
    },
    {
      "id": "q43",
      "question": "What kind of packages do you know under `java.util.*`? Bring at least 3 examples.",
      "answer": "ArrayList for dynamic arrays, HashMap for key-value pairs, and Collections for utility methods to manipulate collections."
    }
  ],
  "4": [
    {
      "id": "q44",
      "question": "Explain the Single Responsibility Principle.",
      "answer": "A class should only have one responsibility or reason to change. This makes code easier to maintain and less prone to bugs."
    },
    {
      "id": "q45",
      "question": "Explain the Interface Segregation Principle.",
      "answer": "Interfaces should only include methods relevant to specific implementations. This avoids forcing classes to implement methods they don’t need."
    },
    {
      "id": "q46",
      "question": "What is _composition over inheritance_?",
      "answer": "It’s a principle that prefers building systems by combining objects (composition) rather than extending classes (inheritance). This makes code more flexible and reusable."
    },
    {
      "id": "q47",
      "question": "What is a model class?",
      "answer": "A model class represents data in the application, often matching database structures. It contains fields, getters, setters, and sometimes basic validation."
    },
    {
      "id": "q48",
      "question": "What is a service class?",
      "answer": "A service class contains business logic and acts as a bridge between controllers and repositories. It processes data and handles complex operations."
    },
    {
      "id": "q49",
      "question": "Explain the Open/Closed principle.",
      "answer": "Code should be open for extension but closed for modification. This means adding new features shouldn’t require changing existing code."
    },
    {
      "id": "q50",
      "question": "Explain the Liskov Substitution Principle.",
      "answer": "Subclasses should be replaceable by their parent classes without breaking functionality. This ensures consistent behavior in a hierarchy."
    },
    {
      "id": "q51",
      "question": "Explain the Dependency Inversion Principle.",
      "answer": "High-level modules should not depend on low-level modules but on abstractions. This reduces coupling and improves flexibility."
    },
    {
      "id": "q52",
      "question": "What do we mean by the Gang of Four (GoF) Design Patterns? Can you name some of these patterns?",
      "answer": "GoF design patterns are 23 reusable solutions for common software design problems. Examples include Singleton, Factory, Observer, and Strategy patterns."
    },
    {
      "id": "q53",
      "question": "What are the risks associated with using the GoF design patterns?",
      "answer": "Overusing patterns can make code overly complex, hard to understand, or rigid. Choose patterns carefully to avoid unnecessary abstraction."
    },
    {
      "id": "q54",
      "question": "What do we mean by YAGNI?",
      "answer": "\"You Aren’t Gonna Need It\" means avoiding building features or functionality until they are actually required."
    },
    {
      "id": "q55",
      "question": "What do we mean by SLAP?",
      "answer": "The Single Level of Abstraction Principle suggests keeping each method or function at one consistent level of abstraction."
    },
    {
      "id": "q56",
      "question": "What do we mean by KISS?",
      "answer": "\"Keep It Simple, Stupid\" means designing code to be as simple and clear as possible, avoiding unnecessary complexity."
    },
    {
      "id": "q57",
      "question": "What is the Repository Pattern?",
      "answer": "The Repository Pattern abstracts data access logic, providing a consistent API to interact with the data layer."
    },
    {
      "id": "q58",
      "question": "What is a CRUD interface?",
      "answer": "A CRUD interface defines basic operations for managing data: Create, Read, Update, and Delete. It standardizes data interactions."
    }
  ],
  "5": [
    {
      "id": "q59",
      "question": "Why is unit testing a good practice?",
      "answer": "Unit testing ensures individual parts of your code work as expected. It helps catch bugs early, improves code quality, and makes refactoring safer."
    },
    {
      "id": "q60",
      "question": "What is JUnit?",
      "answer": "JUnit is a popular testing framework for Java applications. It provides tools for writing and running unit tests efficiently."
    },
    {
      "id": "q61",
      "question": "What is a parameterized test?",
      "answer": "A parameterized test runs the same test logic with different input values. This helps test multiple scenarios without duplicating code."
    },
    {
      "id": "q62",
      "question": "What options do you have in NUnit to create parameterized tests?",
      "answer": "NUnit supports parameterized tests using attributes like [TestCase] and [TestCaseSource]. These allow you to pass various inputs to a test method."
    },
    {
      "id": "q63",
      "question": "What is _mocking_?",
      "answer": "Mocking is creating a fake implementation of a dependency to isolate and test specific units of code. It’s commonly used for simulating database or API behavior."
    },
    {
      "id": "q64",
      "question": "What is the difference between _mocking_, _stubbing_ and _faking_?",
      "answer": "• Mocking: Verifies interactions with dependencies and behavior. • Stubbing: Provides predefined responses to method calls without verifying behavior. • Faking: Uses lightweight implementations that mimic real functionality, often simpler than mocks or stubs."
    }
  ],
  "6": [
    {
      "id": "q65",
      "question": "What are relational databases? What are their advantages and disadvantages?",
      "answer": "Relational databases store data in structured tables with relationships between them. Advantages include data consistency, scalability, and flexibility with queries. Disadvantages include higher complexity and potential performance issues with large datasets."
    },
    {
      "id": "q66",
      "question": "How do you associate entities to each other in a relational database model?",
      "answer": "Entities are associated using keys: primary keys uniquely identify records, and foreign keys reference these primary keys to create relationships between tables."
    },
    {
      "id": "q67",
      "question": "What are tables in a relational database?",
      "answer": "Tables are structured collections of data organized into rows (records) and columns (fields). Each table represents an entity in the database."
    },
    {
      "id": "q68",
      "question": "What is a _primary key_?",
      "answer": "A primary key uniquely identifies each record in a table. It ensures no duplicate or null values for the specified column(s)."
    },
    {
      "id": "q69",
      "question": "What is a _foreign key_?",
      "answer": "A foreign key is a column or set of columns in one table that references the primary key in another table to establish relationships."
    },
    {
      "id": "q70",
      "question": "What does the SQL abbreviation stand for?",
      "answer": "SQL stands for Structured Query Language, used to manage and manipulate relational databases."
    },
    {
      "id": "q71",
      "question": "What are some of the SQL database providers that you’ve heard of?",
      "answer": "Common SQL providers include MySQL, PostgreSQL, Microsoft SQL Server, Oracle Database, and SQLite."
    },
    {
      "id": "q72",
      "question": "What are SQL data types? Are there any differences in data types between different SQL databases?",
      "answer": "SQL data types define the type of data a column can store, such as INT, VARCHAR, or DATE. Different databases may have slight variations in supported types and syntax (e.g., TEXT in MySQL vs. CLOB in Oracle)."
    },
    {
      "id": "q73",
      "question": "What are _constraints_ in SQL?",
      "answer": "Constraints enforce rules on data, such as NOT NULL (disallow null values), UNIQUE (no duplicate values), or CHECK (validate data conditions)."
    },
    {
      "id": "q74",
      "question": "How can we program different SQL databases in Java?",
      "answer": "Java provides the JDBC (Java Database Connectivity) API to interact with SQL databases. Frameworks like Hibernate or JPA make database interactions simpler."
    },
    {
      "id": "q75",
      "question": "Which SQL statement is used to create tables? Describe the syntax briefly.",
      "answer": "CREATE TABLE table_name ( column_name data_type constraint, ... );"
    },
    {
      "id": "q76",
      "question": "Which SQL statement can be used to insert values? Describe the syntax briefly.",
      "answer": "INSERT INTO table_name (column1, column2, ...) VALUES (value1, value2, ...);"
    },
    {
      "id": "q77",
      "question": "Which SQL statement can be used to update values? Describe the syntax briefly.",
      "answer": "UPDATE table_name SET column1 = value1, column2 = value2, ... WHERE condition;"
    },
    {
      "id": "q78",
      "question": "Which SQL statement can be used to delete rows? Describe the syntax briefly.",
      "answer": "DELETE FROM table_name WHERE condition;"
    },
    {
      "id": "q79",
      "question": "Which SQL statement can be used to create queries? Describe the syntax briefly.",
      "answer": "SELECT column1, column2, ... FROM table_name WHERE condition;"
    },
    {
      "id": "q80",
      "question": "How can you join tables together in SQL? When should you do it?",
      "answer": "Tables are joined using SQL JOIN statements, like INNER JOIN, LEFT JOIN, or RIGHT JOIN, based on matching keys. Use it when you need related data from multiple tables in a single query."
    }
  ]
}
